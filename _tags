# OASIS_START
# DO NOT EDIT (digest: 5390636848ba9c60f5a0242769e22f9b)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library modelica_ml
"src/modelica_ml.cmxs": use_modelica_ml
<src/*.ml{,i,y}>: package(batteries)
<src/*.ml{,i,y}>: package(compiler-libs.common)
<src/*.ml{,i,y}>: package(menhirLib)
<src/*.ml{,i,y}>: package(ocamlgraph)
<src/*.ml{,i,y}>: package(ppx_deriving.eq)
<src/*.ml{,i,y}>: package(ppx_deriving.show)
<src/*.ml{,i,y}>: package(ppx_deriving_yojson)
<src/*.ml{,i,y}>: package(ppx_import)
<src/*.ml{,i,y}>: package(ppx_monadic)
<src/*.ml{,i,y}>: package(sedlex)
<src/*.ml{,i,y}>: package(yojson)
# Executable modelica_frontend_tests
<test/modelica_frontend_tests.{native,byte}>: package(batteries)
<test/modelica_frontend_tests.{native,byte}>: package(compiler-libs.common)
<test/modelica_frontend_tests.{native,byte}>: package(menhirLib)
<test/modelica_frontend_tests.{native,byte}>: package(oUnit)
<test/modelica_frontend_tests.{native,byte}>: package(ocamlgraph)
<test/modelica_frontend_tests.{native,byte}>: package(ppx_deriving.eq)
<test/modelica_frontend_tests.{native,byte}>: package(ppx_deriving.show)
<test/modelica_frontend_tests.{native,byte}>: package(ppx_deriving_yojson)
<test/modelica_frontend_tests.{native,byte}>: package(ppx_import)
<test/modelica_frontend_tests.{native,byte}>: package(ppx_monadic)
<test/modelica_frontend_tests.{native,byte}>: package(sedlex)
<test/modelica_frontend_tests.{native,byte}>: package(yojson)
<test/modelica_frontend_tests.{native,byte}>: use_modelica_ml
<test/*.ml{,i,y}>: package(batteries)
<test/*.ml{,i,y}>: package(compiler-libs.common)
<test/*.ml{,i,y}>: package(menhirLib)
<test/*.ml{,i,y}>: package(oUnit)
<test/*.ml{,i,y}>: package(ocamlgraph)
<test/*.ml{,i,y}>: package(ppx_deriving.eq)
<test/*.ml{,i,y}>: package(ppx_deriving.show)
<test/*.ml{,i,y}>: package(ppx_deriving_yojson)
<test/*.ml{,i,y}>: package(ppx_import)
<test/*.ml{,i,y}>: package(ppx_monadic)
<test/*.ml{,i,y}>: package(sedlex)
<test/*.ml{,i,y}>: package(yojson)
<test/*.ml{,i,y}>: use_modelica_ml
# Executable modml_clc
<examples/modml_clc.{native,byte}>: package(batteries)
<examples/modml_clc.{native,byte}>: package(compiler-libs.common)
<examples/modml_clc.{native,byte}>: package(menhirLib)
<examples/modml_clc.{native,byte}>: package(ocamlgraph)
<examples/modml_clc.{native,byte}>: package(ppx_deriving.eq)
<examples/modml_clc.{native,byte}>: package(ppx_deriving.show)
<examples/modml_clc.{native,byte}>: package(ppx_deriving_yojson)
<examples/modml_clc.{native,byte}>: package(ppx_import)
<examples/modml_clc.{native,byte}>: package(ppx_monadic)
<examples/modml_clc.{native,byte}>: package(sedlex)
<examples/modml_clc.{native,byte}>: package(yojson)
<examples/modml_clc.{native,byte}>: use_modelica_ml
# Executable dump_cl
<examples/dump_cl.{native,byte}>: package(batteries)
<examples/dump_cl.{native,byte}>: package(compiler-libs.common)
<examples/dump_cl.{native,byte}>: package(menhirLib)
<examples/dump_cl.{native,byte}>: package(ocamlgraph)
<examples/dump_cl.{native,byte}>: package(ppx_deriving.eq)
<examples/dump_cl.{native,byte}>: package(ppx_deriving.show)
<examples/dump_cl.{native,byte}>: package(ppx_deriving_yojson)
<examples/dump_cl.{native,byte}>: package(ppx_import)
<examples/dump_cl.{native,byte}>: package(ppx_monadic)
<examples/dump_cl.{native,byte}>: package(sedlex)
<examples/dump_cl.{native,byte}>: package(yojson)
<examples/dump_cl.{native,byte}>: use_modelica_ml
# Executable modml_cl
<examples/modml_cl.{native,byte}>: package(batteries)
<examples/modml_cl.{native,byte}>: package(compiler-libs.common)
<examples/modml_cl.{native,byte}>: package(menhirLib)
<examples/modml_cl.{native,byte}>: package(ocamlgraph)
<examples/modml_cl.{native,byte}>: package(ppx_deriving.eq)
<examples/modml_cl.{native,byte}>: package(ppx_deriving.show)
<examples/modml_cl.{native,byte}>: package(ppx_deriving_yojson)
<examples/modml_cl.{native,byte}>: package(ppx_import)
<examples/modml_cl.{native,byte}>: package(ppx_monadic)
<examples/modml_cl.{native,byte}>: package(sedlex)
<examples/modml_cl.{native,byte}>: package(yojson)
<examples/modml_cl.{native,byte}>: use_modelica_ml
# Executable modml_clread
<examples/modml_clread.{native,byte}>: package(batteries)
<examples/modml_clread.{native,byte}>: package(compiler-libs.common)
<examples/modml_clread.{native,byte}>: package(menhirLib)
<examples/modml_clread.{native,byte}>: package(ocamlgraph)
<examples/modml_clread.{native,byte}>: package(ppx_deriving.eq)
<examples/modml_clread.{native,byte}>: package(ppx_deriving.show)
<examples/modml_clread.{native,byte}>: package(ppx_deriving_yojson)
<examples/modml_clread.{native,byte}>: package(ppx_import)
<examples/modml_clread.{native,byte}>: package(ppx_monadic)
<examples/modml_clread.{native,byte}>: package(sedlex)
<examples/modml_clread.{native,byte}>: package(yojson)
<examples/modml_clread.{native,byte}>: use_modelica_ml
<examples/*.ml{,i,y}>: package(batteries)
<examples/*.ml{,i,y}>: package(compiler-libs.common)
<examples/*.ml{,i,y}>: package(menhirLib)
<examples/*.ml{,i,y}>: package(ocamlgraph)
<examples/*.ml{,i,y}>: package(ppx_deriving.eq)
<examples/*.ml{,i,y}>: package(ppx_deriving.show)
<examples/*.ml{,i,y}>: package(ppx_deriving_yojson)
<examples/*.ml{,i,y}>: package(ppx_import)
<examples/*.ml{,i,y}>: package(ppx_monadic)
<examples/*.ml{,i,y}>: package(sedlex)
<examples/*.ml{,i,y}>: package(yojson)
<examples/*.ml{,i,y}>: use_modelica_ml
# OASIS_STOP
true: use_menhir
